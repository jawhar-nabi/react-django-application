{"ast":null,"code":"import axios from 'axios'; //import { returnErrors } from './messages';\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; // CHECK TOKEN & LOAD USER\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://127.0.0.1:8000/api/auth/user', tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    //dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // LOGIN USER\n\nexport const login = (email, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n  axios.post('http://127.0.0.1:8000/api/auth/login', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    // dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // REGISTER USER\n\nexport const register = ({\n  first_name = '',\n  last_name = '',\n  password = '',\n  email = ''\n}) => dispatch => {\n  console.log(\"*********************************************************\"); // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password\n  });\n  axios.post('http://127.0.0.1:8000/api/auth/register', body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    //dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post('http://127.0.0.1:8000/api/auth/logout/', null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: 'CLEAR_LEADS'\n    });\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {//  dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/react-django-application/bookstore-front/src/actions/auth.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","login","email","password","config","headers","body","JSON","stringify","console","log","post","register","first_name","last_name","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n//import { returnErrors } from './messages';\r\n\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n} from './types';\r\n\r\n// CHECK TOKEN & LOAD USER\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  // User Loading\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get('http://127.0.0.1:8000/api/auth/user', tokenConfig(getState))\r\n    .then((res) => {\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      //dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n      });\r\n    });\r\n};\r\n\r\n// LOGIN USER\r\nexport const login = (email, password) => (dispatch) => {\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  // Request Body\r\n  const body = JSON.stringify({email, password });\r\n  console.log(body);\r\n  axios\r\n    .post('http://127.0.0.1:8000/api/auth/login', body, config)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n     // dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n    });\r\n};\r\n\r\n// REGISTER USER\r\nexport const register = ({ first_name='',last_name='', password='', email='' }) => (dispatch) => {\r\n\r\n  console.log(\"*********************************************************\");\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  // Request Body\r\n  const body = JSON.stringify({ first_name,last_name, email, password });\r\n\r\n  axios\r\n    .post('http://127.0.0.1:8000/api/auth/register', body, config)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      //dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    });\r\n};\r\n\r\n// LOGOUT USER\r\nexport const logout = () => (dispatch, getState) => {\r\n  axios\r\n    .post('http://127.0.0.1:8000/api/auth/logout/', null, tokenConfig(getState))\r\n    .then((res) => {\r\n      dispatch({ type: 'CLEAR_LEADS' });\r\n      dispatch({\r\n        type: LOGOUT_SUCCESS,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n    //  dispatch(returnErrors(err.response.data, err.response.status));\r\n    });\r\n};\r\n\r\n// Setup config with token - helper function\r\nexport const tokenConfig = (getState) => {\r\n  // Get token from state\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  // If token, add to headers config\r\n  if (token) {\r\n    config.headers['Authorization'] = `Token ${token}`;\r\n  }\r\n\r\n  return config;\r\n};"]},"metadata":{},"sourceType":"module"}